--==========================[ Kill Aura & Chop Aura ]=============================--

local killAuraToggle = false
local chopAuraToggle = false
local showRadius = false
local auraRadius = 50
local currentammount = 0
local radiusPart = nil

local toolsDamageIDs = {
    ["Old Axe"] = "3_7367831688",
    ["Good Axe"] = "112_7367831688",
    ["Strong Axe"] = "116_7367831688",
    ["Chainsaw"] = "647_8992824875",
    ["Infernal Sword"] = "2_4340578793",
    ["Spear"] = "196_8999010016"
}

--===[ TOOL FUNCTIONS ]===--
local function getAnyToolWithDamageID(isChopAura)
    for toolName, damageID in pairs(toolsDamageIDs) do
        if isChopAura and toolName ~= "Old Axe" and toolName ~= "Good Axe" and toolName ~= "Strong Axe" then
            continue
        end
        local tool = LocalPlayer:FindFirstChild("Inventory") and LocalPlayer.Inventory:FindFirstChild(toolName)
        if tool then
            return tool, damageID
        end
    end
    return nil, nil
end

local function equipTool(tool)
    if tool then
        ReplicatedStorage:WaitForChild("RemoteEvents").EquipItemHandle:FireServer("FireAllClients", tool)
    end
end

local function unequipTool(tool)
    if tool then
        ReplicatedStorage:WaitForChild("RemoteEvents").UnequipItemHandle:FireServer("FireAllClients", tool)
    end
end

--===[ VISUAL RADIUS SYSTEM ]===--
local function createRadiusCircle()
    if radiusPart then
        radiusPart:Destroy()
    end
    if not showRadius then return end

    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    radiusPart = Instance.new("Part")
    radiusPart.Name = "AuraRadiusPart"
    radiusPart.Anchored = true
    radiusPart.CanCollide = false
    radiusPart.Transparency = 0.8
    radiusPart.Color = Color3.fromRGB(0, 255, 0)
    radiusPart.Material = Enum.Material.ForceField
    radiusPart.Shape = Enum.PartType.Cylinder
    radiusPart.Size = Vector3.new(auraRadius * 2, 0.2, auraRadius * 2)
    radiusPart.CFrame = hrp.CFrame * CFrame.Angles(math.rad(90), 0, 0)
    radiusPart.Parent = workspace

    task.spawn(function()
        while radiusPart and radiusPart.Parent and showRadius do
            local character = LocalPlayer.Character
            local hrp = character and character:FindFirstChild("HumanoidRootPart")
            if not hrp then break end
            radiusPart.CFrame = hrp.CFrame * CFrame.Angles(math.rad(90), 0, 0)
            radiusPart.Size = Vector3.new(auraRadius * 2, 0.2, auraRadius * 2)
            task.wait(0.05)
        end
        if radiusPart then radiusPart:Destroy() end
    end)
end

--===[ AURA LOGIC ]===--
local function killAuraLoop()
    while killAuraToggle do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local tool, damageID = getAnyToolWithDamageID(false)
            if tool and damageID then
                equipTool(tool)
                for _, mob in ipairs(Workspace.Characters:GetChildren()) do
                    if mob:IsA("Model") then
                        local part = mob:FindFirstChildWhichIsA("BasePart")
                        if part and (part.Position - hrp.Position).Magnitude <= auraRadius then
                            pcall(function()
                                ReplicatedStorage:WaitForChild("RemoteEvents").ToolDamageObject:InvokeServer(
                                    mob,
                                    tool,
                                    damageID,
                                    CFrame.new(part.Position)
                                )
                            end)
                        end
                    end
                end
                task.wait(0.1)
            else
                task.wait(1)
            end
        else
            task.wait(0.5)
        end
    end
end

local function chopAuraLoop()
    while chopAuraToggle do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local tool, baseDamageID = getAnyToolWithDamageID(true)
            if tool and baseDamageID then
                equipTool(tool)
                currentammount = currentammount + 1
                local trees = {}
                local map = Workspace:FindFirstChild("Map")
                if map then
                    if map:FindFirstChild("Foliage") then
                        for _, obj in ipairs(map.Foliage:GetChildren()) do
                            if obj:IsA("Model") and (obj.Name == "Small Tree" or obj.Name == "Snowy Small Tree") then
                                table.insert(trees, obj)
                            end
                        end
                    end
                    if map:FindFirstChild("Landmarks") then
                        for _, obj in ipairs(map.Landmarks:GetChildren()) do
                            if obj:IsA("Model") and obj.Name == "Small Tree" then
                                table.insert(trees, obj)
                            end
                        end
                    end
                end
                for _, tree in ipairs(trees) do
                    local trunk = tree:FindFirstChild("Trunk")
                    if trunk and trunk:IsA("BasePart") and (trunk.Position - hrp.Position).Magnitude <= auraRadius then
                        local alreadyammount = false
                        task.spawn(function()
                            while chopAuraToggle and tree and tree.Parent and not alreadyammount do
                                alreadyammount = true
                                currentammount = currentammount + 1
                                pcall(function()
                                    ReplicatedStorage:WaitForChild("RemoteEvents").ToolDamageObject:InvokeServer(
                                        tree,
                                        tool,
                                        tostring(currentammount) .. "_7367831688",
                                        CFrame.new(trunk.Position)
                                    )
                                end)
                                task.wait(0.5)
                            end
                        end)
                    end
                end
                task.wait(0.1)
            else
                task.wait(1)
            end
        else
            task.wait(0.5)
        end
    end
end


--==========================[ Auto Campfire, Scrap, Cook ]=============================--

local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Lokasi posisi
local campfireDropPos = Vector3.new(0, 19, 0) -- posisi api unggun
local autoScrapPos = Vector3.new(21, 20, -5)  -- posisi mesin scrap

-- Item pilihan
local campfireFuelItems = {"Log", "Coal", "Chair", "Fuel Canister", "Oil Barrel", "Biofuel"}
local scrapJunkItems = {"Log", "Chair", "Tyre", "Bolt", "Broken Fan", "Broken Microwave", "Sheet Metal", "Old Radio", "Washing Machine", "Old Car Engine"}
local autoCookItems = {"Morsel", "Steak", "Ribs", "Salmon", "Mackerel"}

-- Variabel toggle dan pilihan
local selectedCampfireItem = nil
local selectedScrapItem = nil
local autoUpgradeCampfireEnabled = false
local autoScrapItemsEnabled = false
local autoCookEnabledItems = {}
local autoCookEnabled = false

-- Fungsi umum untuk mindahkan item ke posisi tertentu
local function moveItemToPos(item, position)
    if not item or not item:IsDescendantOf(Workspace) then return end
    local part = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
    if not part then return end

    pcall(function()
        ReplicatedStorage:WaitForChild("RemoteEvents").RequestStartDraggingItem:FireServer(item)
        if item:IsA("Model") then
            item:SetPrimaryPartCFrame(CFrame.new(position))
        else
            part.CFrame = CFrame.new(position)
        end
        ReplicatedStorage:WaitForChild("RemoteEvents").StopDraggingItem:FireServer(item)
    end)
end

--==========================[ Bring ]=============================--

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- // Bring Core Functions
local isCollecting = false
local originalPosition = nil

local function smoothPullToItem(startPos, endPos, duration)
    local player = LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local startTime = tick()
    spawn(function()
        while tick() - startTime < duration do
            local elapsed = tick() - startTime
            local progress = elapsed / duration
            local eased = progress < 0.5 and 2 * progress^2 or 1 - ((-2 * progress + 2)^2) / 2
            local pos = startPos.Position:Lerp(endPos.Position, eased)
            hrp.CFrame = CFrame.new(pos)
            task.wait()
        end
        hrp.CFrame = endPos
    end)
    task.wait(duration)
end

local function createItemPullEffect(itemPart, targetPos, duration)
    if not itemPart or not itemPart.Parent then return end
    local startPos = itemPart.Position
    local startTime = tick()
    spawn(function()
        while tick() - startTime < duration do
            if not itemPart or not itemPart.Parent then break end
            local elapsed = tick() - startTime
            local progress = elapsed / duration
            local eased = 1 - (1 - progress)^3
            local pos = startPos:Lerp(targetPos, eased)
            pcall(function()
                itemPart.CFrame = CFrame.new(pos)
                itemPart.Velocity = Vector3.zero
                itemPart.AngularVelocity = Vector3.zero
            end)
            task.wait()
        end
    end)
    task.wait(duration)
end

local function bypassBringSystem(items, stopFlag)
    if isCollecting then return end
    isCollecting = true

    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then isCollecting = false return end

    originalPosition = hrp.CFrame

    for _, itemName in ipairs(items) do
        if stopFlag and not stopFlag() then break end
        for _, item in ipairs(Workspace:GetDescendants()) do
            if item.Name == itemName and (item:IsA("BasePart") or item:IsA("Model")) then
                local part = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
                if part and part.Parent ~= LocalPlayer.Character then
                    smoothPullToItem(hrp.CFrame, part.CFrame + Vector3.new(0, 5, 0), 1)
                    createItemPullEffect(part, hrp.Position + Vector3.new(0, -1, 0), 0.8)
                    smoothPullToItem(hrp.CFrame, originalPosition, 1)
                    createItemPullEffect(part, originalPosition.Position + Vector3.new(math.random(-3,3), 2, math.random(-3,3)), 0.5)
                    task.wait(0.5)
                end
            end
        end
    end

    hrp.CFrame = originalPosition
    isCollecting = false
end

-- // Items Category
local junkItems = {"Tyre", "Bolt", "Broken Fan", "Broken Microwave", "Sheet Metal", "Old Radio", "Washing Machine", "Old Car Engine"}
local fuelItems = {"Log", "Chair", "Coal", "Fuel Canister", "Oil Barrel"}
local foodItems = {"Cake", "Cooked Steak", "Cooked Morsel", "Ribs", "Salmon", "Cooked Salmon", "Cooked Ribs", "Mackerel", "Cooked Mackerel", "Steak", "Morsel", "Berry", "Carrot"}
local medicalItems = {"Bandage", "MedKit"}
local equipmentItems = {"Revolver", "Rifle", "Leather Body", "Iron Body", "Revolver Ammo", "Rifle Ammo", "Giant Sack", "Good Sack", "Strong Axe", "Good Axe"}

-- Shared vars
local selectedJunk = {}
local selectedFuel = {}
local selectedFood = {}
local selectedMed = {}
local selectedEquip = {}

local junkToggle = false
local fuelToggle = false
local foodToggle = false
local medToggle = false
local equipToggle = false

--==========================[ Dropdown Teleport ]==========================--

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- // Teleport Functions
local function tpCampfire()
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp then
        hrp.CFrame = CFrame.new(0.43132782, 15.77634621, -1.88620758)
    end
end

local function tpStronghold()
    local map = Workspace:FindFirstChild("Map")
    if not map then return end
    local target = map:FindFirstChild("Landmarks")
    if not target then return end
    local stronghold = target:FindFirstChild("Stronghold")
    if stronghold and stronghold:FindFirstChild("Functional") then
        local entry = stronghold.Functional:FindFirstChild("EntryDoors")
        if entry and entry:FindFirstChild("DoorRight") then
            local door = entry.DoorRight:FindFirstChild("Model")
            if door and door:FindFirstChildWhichIsA("BasePart") then
                local pos = door:GetChildren()[5]
                local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp and pos then
                    hrp.CFrame = pos.CFrame + Vector3.new(0, 5, 0)
                end
            end
        end
    end
end

local function tpSafeZone()
    if not Workspace:FindFirstChild("SafeZonePart") then
        local p = Instance.new("Part")
        p.Name = "SafeZonePart"
        p.Anchored = true
        p.CanCollide = true
        p.Transparency = 0.7
        p.Color = Color3.fromRGB(255, 0, 0)
        p.Size = Vector3.new(30, 3, 30)
        p.Position = Vector3.new(0, 350, 0)
        p.Parent = Workspace
    end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp then hrp.CFrame = CFrame.new(0, 360, 0) end
end

local function tpTrader()
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp then hrp.CFrame = CFrame.new(-37.08, 3.98, -16.33) end
end

local function tpRandomTree()
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local map = Workspace:FindFirstChild("Map")
    if not map then return end
    local foliage = map:FindFirstChild("Foliage") or map:FindFirstChild("Landmarks")
    if not foliage then return end

    local trees = {}
    for _, obj in ipairs(foliage:GetChildren()) do
        if obj.Name == "Small Tree" and obj:IsA("Model") then
            local trunk = obj:FindFirstChild("Trunk") or obj.PrimaryPart
            if trunk then table.insert(trees, trunk) end
        end
    end

    if #trees > 0 then
        local t = trees[math.random(1, #trees)]
        hrp.CFrame = t.CFrame + Vector3.new(0, 5, 0)
    end
end

local function tpLostChild()
    for _, mob in ipairs(Workspace:WaitForChild("Characters"):GetChildren()) do
        if mob.Name:match("^Lost Child") and mob:GetAttribute("Lost") then
            local part = mob.PrimaryPart or mob:FindFirstChildWhichIsA("BasePart")
            if part then
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0) end
            end
            break
        end
    end
end

local function tpChest()
    for _, item in ipairs(Workspace:WaitForChild("Items"):GetChildren()) do
        if item.Name:match("^Item Chest") then
            local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
            if part then
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0) end
            end
            break
        end
    end
end


--==========================[ WINDUI SETUP ]=============================--
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Ambil nama player
local player = game.Players.LocalPlayer
local playerName = player.Name
local playerDisplayName = player.DisplayName

-- Buat Window
local Window = WindUI:CreateWindow({
    Title = "Nexa - Beta",
    Icon = "rbxassetid://131269662643486",
    Author = "99 Script | @ Han",
    Folder = "Hanzo",
    Size = UDim2.fromOffset(650, 510),

    Theme = "Plant",
    Transparent = true,
    Acrylic = false,
    HidePanelBackground = true,
    HideSearchBar = false,
    NewElements = true,
    SideBarWidth = 200,

    -- Profil user di pojok kanan atas
    User = {
        Enabled = true,
        Anonymous = false,
        Name = playerDisplayName,
        UserName = "@" .. playerName,
        Callback = function()
            WindUI:Notify({
                Title = "User Profile",
                Content = "User profile clicked!",
                Duration = 3
            })
        end
    }
})

Window:Tag({
    Title = "v0.0.0",
    Color = Color3.fromHex("#30ff6a")
})


Window:EditOpenButton({
    Enabled = false
})

local Tabs = {
    Home = Window:Tab({ Title = "Home", Icon = "house"  }),
    Main = Window:Tab({ Title = "Main", Icon = "sword"  }),
    Auto = Window:Tab({ Title = "Automaticaly", Icon = "repeat-2"  }),
    Bring = Window:Tab({ Title = "Bring", Icon = "box"  }),
    Tp = Window:Tab({ Title = "Teleport", Icon = "map-pin"  }),
}

Tabs.Home:Section({ Title = "Update", Icon = "logs" })

Tabs.Home:Section({
        Title = "Here's what's new:",
        TextSize = 24,
        FontWeight = Enum.FontWeight.SemiBold,
    })

Tabs.Home:Section({
        Title = [[

		]],
        TextSize = 18,
        TextTransparency = .35,
        FontWeight = Enum.FontWeight.Medium,
    })

Tabs.Home:Section({ Title = "Server" })

Tabs.Home:Paragraph({
    Title = "Nexa Hub",
    Image = "https://i.imgur.com/vl0g8IK.png",
    ImageSize = 42, -- default 30
    Thumbnail = "https://i.imgur.com/3m8FV2y.jpeg",
    ThumbnailSize = 120 -- Thumbnail height
})

Tabs.Home:Paragraph({
    Title = "Discord - Nexa | COMMUNITY",
    Desc = "Indonesia 🇮🇩",
    Image = "https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHHFT949fUipzkiFOBH3fAiZZUCdYojwUyX2aTonS1aIwMrx6NUIsHfUHSLzjGJFxxsG72wAo9EWJR4yQWyJJaDaK1XdUso6cUMpI9hAdPUU_FNs11cY1X284vsHrnWtRw7oqRpN1m9YAg21d_aNKnIo-&format=source",
    ImageSize = 40,
    Color = "Grey",
    Buttons = {
        {
            Title = "Copy Link",
            Icon = "copy",
            Variant = "Tertiary",
            Callback = function()
                setclipboard("discord.gg/ECxQFc97F5")
                WindUI:Notify({
                    Title = "Copied!",
                    Content = "Discord link copied to clipboard",
                    Duration = 2
                })
            end
        }
    }
})

Tabs.Main:Section({ Title = "Combat" })

Tabs.Combat:Toggle({
    Title = "Kill Aura",
    Value = false,
    Callback = function(state)
        killAuraToggle = state
        if state then
            task.spawn(killAuraLoop)
            if showRadius then createRadiusCircle() end
        else
            local tool, _ = getAnyToolWithDamageID(false)
            unequipTool(tool)
        end
    end
})

Tabs.Combat:Toggle({
    Title = "Chop Aura",
    Value = false,
    Callback = function(state)
        chopAuraToggle = state
        if state then
            task.spawn(chopAuraLoop)
            if showRadius then createRadiusCircle() end
        else
            local tool, _ = getAnyToolWithDamageID(true)
            unequipTool(tool)
        end
    end
})

Tabs.Combat:Toggle({
    Title = "Show Radius Circle",
    Value = false,
    Callback = function(state)
        showRadius = state
        if state then
            createRadiusCircle()
        else
            if radiusPart then
                radiusPart:Destroy()
                radiusPart = nil
            end
        end
    end
})

Tabs.Combat:Slider({
    Title = "Aura Radius",
    Step = 1,
    Value = {
        Min = 50,
        Max = 1000,
        Default = 50,
    },
    Callback = function(value)
        auraRadius = value
        if radiusPart then
            radiusPart.Size = Vector3.new(auraRadius * 2, 0.2, auraRadius * 2)
        end
    end
})

Tabs.Auto:Section({ Title = "Campfire" })

Tabs.Auto:Dropdown({
    Title = "Select Fuel Item",
    Desc = "Pilih bahan bakar untuk campfire",
    Values = campfireFuelItems,
    Multi = false,
    AllowNone = true,
    Callback = function(option)
        selectedCampfireItem = option
    end
})

Tabs.Auto:Toggle({
    Title = "Auto Upgrade Campfire",
    Value = false,
    Callback = function(state)
        autoUpgradeCampfireEnabled = state
        if state then
            task.spawn(function()
                while autoUpgradeCampfireEnabled do
                    if selectedCampfireItem then
                        for _, item in ipairs(Workspace:WaitForChild("Items"):GetChildren()) do
                            if item.Name == selectedCampfireItem then
                                moveItemToPos(item, campfireDropPos)
                            end
                        end
                    end
                    task.wait(2)
                end
            end)
        end
    end
})

-- SECTION: SCRAP
Tabs.Auto:Section({ Title = "Scrap Items" })

Tabs.Auto:Dropdown({
    Title = "Select Scrap Item",
    Desc = "Pilih item yang mau di-scrap",
    Values = scrapJunkItems,
    Multi = false,
    AllowNone = true,
    Callback = function(option)
        selectedScrapItem = option
    end
})

AutoTab:Toggle({
    Title = "Auto Scrap Item",
    Value = false,
    Callback = function(state)
        autoScrapItemsEnabled = state
        if state then
            task.spawn(function()
                while autoScrapItemsEnabled do
                    if selectedScrapItem then
                        for _, item in ipairs(Workspace:WaitForChild("Items"):GetChildren()) do
                            if item.Name == selectedScrapItem then
                                moveItemToPos(item, autoScrapPos)
                            end
                        end
                    end
                    task.wait(2)
                end
            end)
        end
    end
})

-- SECTION: COOK
Tabs.Auto:Section({ Title = "Cook Food" })

Tabs.Auto:Dropdown({
    Title = "Select Cookable Food",
    Desc = "Pilih makanan yang ingin dimasak",
    Values = autoCookItems,
    Multi = true,
    AllowNone = true,
    Callback = function(selected)
        for _, name in ipairs(autoCookItems) do
            autoCookEnabledItems[name] = table.find(selected, name) ~= nil
        end
    end
})

Tabs.Auto:Toggle({
    Title = "Auto Cook Food",
    Value = false,
    Callback = function(state)
        autoCookEnabled = state
        if state then
            task.spawn(function()
                while autoCookEnabled do
                    for name, enabled in pairs(autoCookEnabledItems) do
                        if enabled then
                            for _, item in ipairs(Workspace:WaitForChild("Items"):GetChildren()) do
                                if item.Name == name then
                                    moveItemToPos(item, campfireDropPos)
                                end
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

Tabs.Bring:Section({ Title = "Junk Items" })

Tabs.Bring:Dropdown({
    Title = "Select Junk Items",
    Values = junkItems,
    Multi = true,
    Callback = function(opt) selectedJunk = opt end
})
Tabs.Bring:Toggle({
    Title = "Bring Junk",
    Callback = function(v)
        junkToggle = v
        if v then
            task.spawn(function()
                while junkToggle do
                    bypassBringSystem(selectedJunk, function() return junkToggle end)
                    task.wait(3)
                end
            end)
        end
    end
})

Tabs.Bring:Section({ Title = "Fuel Items" })

Tabs.Bring:Dropdown({
    Title = "Select Fuel Items",
    Values = fuelItems,
    Multi = true,
    Callback = function(opt) selectedFuel = opt end
})
Tabs.Bring:Toggle({
    Title = "Bring Fuel",
    Callback = function(v)
        fuelToggle = v
        if v then
            task.spawn(function()
                while fuelToggle do
                    bypassBringSystem(selectedFuel, function() return fuelToggle end)
                    task.wait(3)
                end
            end)
        end
    end
})

Tabs.Bring:Section({ Title = "Food Items" })

Tabs.Bring:Dropdown({
    Title = "Select Food Items",
    Values = foodItems,
    Multi = true,
    Callback = function(opt) selectedFood = opt end
})
Tabs.Bring:Toggle({
    Title = "Bring Food",
    Callback = function(v)
        foodToggle = v
        if v then
            task.spawn(function()
                while foodToggle do
                    bypassBringSystem(selectedFood, function() return foodToggle end)
                    task.wait(3)
                end
            end)
        end
    end
})

Tabs.Bring:Section({ Title = "Medical Items" })

Tabs.Bring:Dropdown({
    Title = "Select Medical Items",
    Values = medicalItems,
    Multi = true,
    Callback = function(opt) selectedMed = opt end
})
Tabs.Bring:Toggle({
    Title = "Bring Medical",
    Callback = function(v)
        medToggle = v
        if v then
            task.spawn(function()
                while medToggle do
                    bypassBringSystem(selectedMed, function() return medToggle end)
                    task.wait(3)
                end
            end)
        end
    end
})

Tabs.Bring:Section({ Title = "Equipment Items" })

Tabs.Bring:Dropdown({
    Title = "Select Equipment Items",
    Values = equipmentItems,
    Multi = true,
    Callback = function(opt) selectedEquip = opt end
})
Tabs.Bring:Toggle({
    Title = "Bring Equipment",
    Callback = function(v)
        equipToggle = v
        if v then
            task.spawn(function()
                while equipToggle do
                    bypassBringSystem(selectedEquip, function() return equipToggle end)
                    task.wait(3)
                end
            end)
        end
    end
})

Tabs.Tp:Section({ Title = "Teleport" })

local locations = {
    "Campfire",
    "Stronghold",
    "Safe Zone",
    "Trader (Bunny Foot)",
    "Random Tree",
    "Lost Child",
    "Chest"
}

local selectedLocation = "Campfire"

Tabs.Tp:Dropdown({
    Title = "Select Teleport Destination",
    Values = locations,
    Value = selectedLocation,
    Callback = function(option)
        selectedLocation = option
    end
})

Tabs.Tp:Button({
    Title = "Teleport Now",
    Icon = "navigation",
    Callback = function()
        if selectedLocation == "Campfire" then
            tpCampfire()
        elseif selectedLocation == "Stronghold" then
            tpStronghold()
        elseif selectedLocation == "Safe Zone" then
            tpSafeZone()
        elseif selectedLocation == "Trader (Bunny Foot)" then
            tpTrader()
        elseif selectedLocation == "Random Tree" then
            tpRandomTree()
        elseif selectedLocation == "Lost Child" then
            tpLostChild()
        elseif selectedLocation == "Chest" then
            tpChest()
        end

        WindUI:Notify({
            Title = "Teleport Success",
            Content = "Teleported to " .. selectedLocation,
            Duration = 3,
            Icon = "map"
        })
    end
})
